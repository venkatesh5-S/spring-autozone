options:
  logging: CLOUD_LOGGING_ONLY  # Store logs in Cloud Logging

steps:
  # Step 1: Setup JDK and Build Spring Boot App
  - id: 'Build JAR'
    name: 'gcr.io/cloud-builders/mvn'
    args: ['clean', 'package', '-DskipTests', '-X']
    dir: '/workspace/autozonepoc'  # Ensure Maven runs from the root of the workspace
    # Ensure we are in the correct directory to find the pom.xml

  
  # Step 2: Build Docker Image
  - id: 'Build Docker Image'
    name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t',
      'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA',
      '-f',
      '/workspace/autozonepoc/Dockerfile',  # Explicitly specify the Dockerfile path
      '.'  # Ensure the context is set to the correct directory (i.e., /workspace/autozonepoc)
    ]
    dir: '/workspace/autozonepoc'  # Ensure Docker build happens from the correct directory

  # Step 3: Push Docker Image to Artifact Registry
  - id: 'Push Docker Image'
    name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA'
    ]

 
  # Step 4: Deploy to Cloud Run
  - id: 'Deploy to Cloud Run'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_IMAGE_NAME}'
      - '--image'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'
      - '--allow-unauthenticated'  # Allow public access (if required)

# Define Substitutions
substitutions:
  _PROJECT_ID: 'demopocs'  # Replace with your project ID
  _REPO_NAME: 'autozone-bc'  # Adjust repo name for the artifact registry
  _IMAGE_NAME: 'springbackend'  # Define image name as springbackend
