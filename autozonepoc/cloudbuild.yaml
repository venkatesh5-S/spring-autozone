# Set the logging level to Cloud Logging only
options:
  logging: CLOUD_LOGGING_ONLY

# Steps to build and deploy the Spring Boot application
steps:
  # Step 1: Build the Spring Boot JAR file using Maven
  - id: 'Build JAR'
    name: 'gcr.io/cloud-builders/mvn'
    args: ['clean', 'package', '-DskipTests', '-X']
    dir: '/workspace/autozonepoc'  # Ensure Maven runs from the root of the workspace

  # Step 2: Build the Docker image
  - id: 'Build Docker Image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA'
      - '-f'
      - '/workspace/autozonepoc/Dockerfile'  # Explicitly specify the Dockerfile path
      - '.'  # Ensure the context is set to the correct directory

  # Step 3: Push the Docker image to Artifact Registry
  - id: 'Push Docker Image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA'

  # Step 4: Deploy to Cloud Run
  - id: 'Deploy to Cloud Run'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_IMAGE_NAME}'
      - '--image'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:$COMMIT_SHA'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'
      - '--allow-unauthenticated'  # Allow public access (if required)

# Define Substitutions
substitutions:
  _PROJECT_ID: 'demopocs'  # Replace with your project ID
  _REPO_NAME: 'autozone-bc'  # Adjust repo name for the artifact registry
  _IMAGE_NAME: 'springbackend'  # Define image name as springbackend
